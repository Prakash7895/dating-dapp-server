// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String   @id @default(uuid())
  userId            String   @unique
  firstName         String
  lastName          String
  age               Int
  gender            String
  sexualOrientation String
  city              String?
  country           String?
  bio               String?
  interests         Json?
  latitude          Float?
  longitude         Float?
  maxDistance       Int?
  minAge            Int?
  maxAge            Int?
  genderPreference  String?
  profilePicture    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("profiles")
}

model User {
  id            String    @id @default(uuid())
  walletAddress String?   @unique
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastActiveOn  DateTime?

  sessions      Session[]
  files         UserFile[]
  profile       Profile?
  likes         Likes[]          @relation("liker")
  liked         Likes[]          @relation("target")
  matchA        Matches[]        @relation("addressA")
  matchB        Matches[]        @relation("addressB")
  ownerAddressA MultiSigWallet[] @relation("ownerAddressA")
  ownerAddressB MultiSigWallet[] @relation("ownerAddressB")
  ChatRoomA     ChatRoom[]       @relation("roomUserA")
  ChatRoomB     ChatRoom[]       @relation("roomUserB")
  ChatMessage   ChatMessage[]

  @@index([email, walletAddress])
  @@map("users")
}

model Session {
  id                  String    @id @default(uuid())
  refreshToken        String?
  refreshTokenExpires DateTime?
  userId              String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model UserFile {
  id        String   @id @default(uuid())
  userId    String
  s3Key     String   @unique
  access    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_files")
}

model Likes {
  id            String   @id @default(uuid())
  likerAddress  String // liker wallet address
  targetAddress String // target wallet address
  status        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User @relation("liker", fields: [likerAddress], references: [walletAddress], onDelete: Cascade)
  target User @relation("target", fields: [targetAddress], references: [walletAddress], onDelete: Cascade)

  @@index([likerAddress, targetAddress])
  @@map("likes")
}

model Matches {
  id        String   @id @default(uuid())
  addressA  String // userA wallet address
  addressB  String // userB wallet address
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userA User @relation("addressA", fields: [addressA], references: [walletAddress], onDelete: Cascade)
  userB User @relation("addressB", fields: [addressB], references: [walletAddress], onDelete: Cascade)

  @@index([addressA, addressB])
  @@map("matches")
}

model MultiSigWallet {
  id            String   @id @default(uuid())
  addressA      String
  addressB      String
  walletAddress String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userA User @relation("ownerAddressA", fields: [addressA], references: [walletAddress], onDelete: Cascade)
  userB User @relation("ownerAddressB", fields: [addressB], references: [walletAddress], onDelete: Cascade)

  @@index([addressA, addressB, walletAddress])
  @@map("multisig_wallets")
}

model ChatRoom {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userAId   String
  userBId   String
  messages  ChatMessage[]

  userA User @relation("roomUserA", fields: [userAId], references: [id])
  userB User @relation("roomUserB", fields: [userBId], references: [id])

  @@unique([userAId, userBId])
  @@map("chat_rooms")
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  roomId    String
  senderId  String
  received  Boolean  @default(false)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation(fields: [senderId], references: [id])

  @@index([roomId, senderId])
  @@map("chat_messages")
}
